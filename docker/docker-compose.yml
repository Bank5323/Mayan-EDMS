version: '3.9'

x-mayan-container:
  &mayan-container
  depends_on:
    - postgresql
    - rabbitmq
    - redis
  env_file: env_file
  environment:
    MAYAN_CELERY_BROKER_URL: amqp://${MAYAN_RABBITMQ_USER}:${MAYAN_RABBITMQ_PASSWORD}@${MAYAN_RABBITMQ_HOST}:${MAYAN_RABBITMQ_PORT}/${MAYAN_RABBITMQ_VHOST}
    MAYAN_CELERY_RESULT_BACKEND: redis://:${MAYAN_REDIS_PASSWORD}@${MAYAN_REDIS_HOST}:${MAYAN_REDIS_PORT}/${MAYAN_REDIS_RESULT_DATABASE}
    MAYAN_DATABASES: "{'default':{'ENGINE':'django.db.backends.postgresql','NAME':'${MAYAN_DATABASE_NAME}','PASSWORD':'${MAYAN_DATABASE_PASSWORD}','USER':'${MAYAN_DATABASE_USER}','HOST':'${MAYAN_DATABASE_HOST}'}}"
    MAYAN_DOCKER_WAIT: "${MAYAN_DATABASE_HOST}:${MAYAN_DATABASE_PORT} ${MAYAN_REDIS_HOST}:${MAYAN_REDIS_PORT} ${MAYAN_RABBITMQ_HOST}:${MAYAN_RABBITMQ_PORT}"
    MAYAN_LOCK_MANAGER_BACKEND: mayan.apps.lock_manager.backends.redis_lock.RedisLock
    MAYAN_LOCK_MANAGER_BACKEND_ARGUMENTS: "{'redis_url':'redis://:${MAYAN_REDIS_PASSWORD}@${MAYAN_REDIS_HOST}:${MAYAN_REDIS_PORT}/${MAYAN_REDIS_LOCK_DATABASE}'}"
  image: ${MAYAN_DOCKER_IMAGE_NAME}:${MAYAN_DOCKER_IMAGE_TAG}
  networks:
    - mayan-internal
  restart: unless-stopped
  volumes:
    - ${MAYAN_APP_VOLUME}:/var/lib/mayan
    # Optional volumes to access external data like staging or watch folders
    # - /opt/staging_folder:/staging_folder
    # - /opt/watch_folder:/watch_folder

networks:
  mayan-internal:
    driver: bridge
  traefik-public:
    external: true

services:
  # Mayan EDMS services.

  app:
    <<: *mayan-container
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.mayan_frontend_redirect.redirectscheme.permanent=false"
      - "traefik.http.middlewares.mayan_frontend_redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.mayan_frontend_http.entrypoints=http"
      - "traefik.http.routers.mayan_frontend_http.middlewares=mayan_frontend_redirect"
      - "traefik.http.routers.mayan_frontend_http.rule=Host(`${MAYAN_EXTERNAL_DOMAIN}`)"
      - "traefik.http.routers.mayan_frontend_https.entrypoints=https"
      - "traefik.http.routers.mayan_frontend_https.rule=Host(`${MAYAN_EXTERNAL_DOMAIN}`)"
      - "traefik.http.routers.mayan_frontend_https.tls=${MAYAN_TLS_ENABLE}"
      - "traefik.http.routers.mayan_frontend_https.tls.certresolver=letsencrypt"
      - "traefik.http.services.mayan_frontend_http.loadbalancer.server.port=8000"
    profiles:
      - all_in_one

  # Run a frontend gunicorn container.
  frontend:
    <<: *mayan-container
    command:
      - run_frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.mayan_frontend_redirect.redirectscheme.permanent=false"
      - "traefik.http.middlewares.mayan_frontend_redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.mayan_frontend_http.entrypoints=http"
      - "traefik.http.routers.mayan_frontend_http.middlewares=mayan_frontend_redirect"
      - "traefik.http.routers.mayan_frontend_http.rule=Host(`${MAYAN_EXTERNAL_DOMAIN}`)"
      - "traefik.http.routers.mayan_frontend_https.entrypoints=https"
      - "traefik.http.routers.mayan_frontend_https.rule=Host(`${MAYAN_EXTERNAL_DOMAIN}`)"
      - "traefik.http.routers.mayan_frontend_https.tls=${MAYAN_TLS_ENABLE}"
      - "traefik.http.routers.mayan_frontend_https.tls.certresolver=letsencrypt"
      - "traefik.http.services.mayan_frontend_http.loadbalancer.server.port=8000"
    profiles:
      - extra_frontend

  # Enable to run standalone workers.
  mountindex:
    <<: *mayan-container
    cap_add:
      - SYS_ADMIN
    devices:
      - "/dev/fuse:/dev/fuse"
    entrypoint:
      - /bin/sh
      - -c
      - 'mkdir --parents /mnt/index && chown mayan:mayan /mnt/index && /usr/local/bin/entrypoint.sh run_command "mountindex --allow-other creation_date /mnt/index"'  # Replace "creation_date" with the index of your choice.
    profiles:
      - mountindex
    security_opt:
      - apparmor:unconfined
    volumes:
      - type: bind
        source: /mnt/mayan_indexes/creation_date  # Host location where the index will show up.
        target: /mnt/index  # Location inside the container where the index will be mounted. Must the same is in the "entrypoint" section.
        bind:
          propagation: shared

  # Run a separate class A worker.
  worker_a:
    <<: *mayan-container
    command:
      - run_worker
      - worker_a
    profiles:
      - extra_worker_a

  # Run a separate class B worker.
  worker_b:
    <<: *mayan-container
    command:
      - run_worker
      - worker_b
    profiles:
      - extra_worker_b

  # Run a separate class C worker.
  worker_c:
    <<: *mayan-container
    command:
      - run_worker
      - worker_c
    profiles:
      - extra_worker_c

  # Run a separate class D worker.
  worker_d:
    <<: *mayan-container
    command:
      - run_worker
      - worker_d
    profiles:
      - extra_worker_d

  # Run a separate Celery beat container.
  celery_beat:
    <<: *mayan-container
    command:
      - run_celery
      - "beat --pidfile= --loglevel=ERROR"
    profiles:
      - extra_celery_beat

  command_initialsetup:
    <<: *mayan-container
    command:
      - run_command
      - "initialsetup --no-dependencies"
    profiles:
      - extra_command_initialsetup
    restart: "no"

  command_performupgrade:
    <<: *mayan-container
    command:
      - run_command
      - "performupgrade --no-dependencies"
    profiles:
      - extra_command_performupgrade
    restart: "no"

  # Third party services.

  postgresql:
    command:
      - "postgres"
      - "-c"
      - "checkpoint_completion_target=0.6"
      - "-c"
      - "default_statistics_target=200"
      - "-c"
      - "maintenance_work_mem=128MB"
      - "-c"
      - "max_connections=150"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "work_mem=8MB"
    environment:
      POSTGRES_DB: ${MAYAN_DATABASE_NAME}
      POSTGRES_PASSWORD: ${MAYAN_DATABASE_PASSWORD}
      POSTGRES_USER: ${MAYAN_DATABASE_USER}
    image: postgres:${MAYAN_DOCKER_POSTGRES_TAG}
    networks:
      - mayan-internal
    profiles:
      - postgresql
    restart: unless-stopped
    volumes:
      - ${MAYAN_POSTGRES_VOLUME}:/var/lib/postgresql/data

  redis:
    command:
      - redis-server
      - --appendonly
      - "no"
      - --databases
      - "3"
      - --maxmemory
      - "100mb"
      - --maxclients
      - "500"
      - --maxmemory-policy
      - "allkeys-lru"
      - --save
      - ""
      - --tcp-backlog
      - "256"
      - --requirepass
      - "${MAYAN_REDIS_PASSWORD}"
    image: redis:${MAYAN_DOCKER_REDIS_TAG}
    networks:
      - mayan-internal
    profiles:
      - redis
    restart: unless-stopped
    volumes:
      - ${MAYAN_REDIS_VOLUME}:/data

  rabbitmq:
    image: rabbitmq:${MAYAN_DOCKER_RABBITMQ_TAG}
    environment:
      RABBITMQ_DEFAULT_USER: ${MAYAN_RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${MAYAN_RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ${MAYAN_RABBITMQ_VHOST}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mayan_rabbitmq_admin.entrypoints=rabbitmq_admin"
      - "traefik.http.routers.mayan_rabbitmq_admin.rule=Host(`${MAYAN_EXTERNAL_DOMAIN}`)"
      - "traefik.http.routers.mayan_rabbitmq_admin.tls=${MAYAN_TLS_ENABLE}"
      - "traefik.http.routers.mayan_rabbitmq_admin.tls.certresolver=letsencrypt"
      - "traefik.http.services.mayan_rabbitmq_admin.loadbalancer.server.port=15672"
    networks:
      - mayan-internal
    profiles:
      - rabbitmq
    restart: unless-stopped
    volumes:
      - ${MAYAN_RABBITMQ_VOLUME}:/var/lib/rabbitmq

  traefik:
    container_name: "traefik"
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=${MAYAN_TRAEFIK_API_INSECURE}"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--certificatesresolvers.letsencrypt.acme.email=${MAYAN_TRAEFIK_LE_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.caserver=${MAYAN_TRAEFIK_LE_SERVER:-https://acme-staging-v02.api.letsencrypt.org/directory}"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=${MAYAN_TRAEFIK_TLS_CHALLENGE_ENABLE}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--entrypoints.rabbitmq_admin.address=:15672"
    image: "traefik:${MAYAN_DOCKER_TRAEFIK_TAG}"
    networks:
      - mayan-internal
      - traefik-public
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
      - "15672:15672"
    profiles:
      - traefik
    volumes:
      - traefik-certificates:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro

volumes:
  app:
  postgres:
  mountindex:
  rabbitmq:
  redis:
  traefik-certificates:
